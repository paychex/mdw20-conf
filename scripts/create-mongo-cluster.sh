#!/bin/bash

#*************#
#*** SETUP ***#
#*************#

set -e # Exit on any error

THIS_DIR=$(dirname "$0")
. $THIS_DIR/config.sh

run() {
  set -xe # Echo command
  "${@}"
  { set +x; } 2>/dev/null  # Turn off echo without writing to console
}

exec 3>&1; # Create FD 3 for console output
substitute_and_log() {
  local commands=()
  local substitute
  local with

  while [[ $# -gt 0 ]]; do
    if [[ $# -eq 1 ]]; then
      echo "SCRIPT ERROR: substitute_and_log expects an even number of parameters"
      exit 1
    fi
    substitute="$1"; shift
    with="$1"; shift
    commands+=( "sed 's/$substitute/$with/g'")
  done
  commands+=( '(echo "++STDIN:" >&3; tee /dev/fd/3)' )
  (IFS="|"; eval "${commands[*]}")
}

#************************************#
#***  CREATE NAMESPACE FOR NODES  ***#
#************************************#

CLUSTERS=( $AZ_AKS_NAME_US_EAST $AZ_AKS_NAME_US_WEST $AZ_AKS_NAME_EU )

for CLUSTER in ${CLUSTERS[*]}; do

  # Create namespace in each cluster
  KUBECTL_ARGS=( "--context=$CLUSTER" )
  COMMAND_OUTPUT=$(run kubectl get namespace $MONGO_K8S_NAMESPACE --ignore-not-found ${KUBECTL_ARGS[*]})
  if [ -z "$COMMAND_OUTPUT" ]; then
    run kubectl --context=$CLUSTER create namespace $MONGO_K8S_NAMESPACE ${KUBECTL_ARGS[*]}
  else
    echo "SKIPPING: Namespace '$MONGO_K8S_NAMESPACE' exists in '$CLUSTER'"
  fi

done

#**********************************#
#***  CREATE REPLICA SET NODES  ***#
#**********************************#

for REPLICA_SET_INDEX in "${!MONGO_REPLICA_SETS[@]}"; do

  REPLICA_SET_NAME=${MONGO_REPLICA_SETS[$REPLICA_SET_INDEX]}
  DNS_SRV_NAME=${MONGO_DNS_SRV_NAMES[$REPLICA_SET_INDEX]}
  REPLICA_SET_CLUSTERS=${MONGO_CLUSTERS[$REPLICA_SET_INDEX]}
  REPLICA_SET_DNS_NAMES=(${MONGO_DNS_NAMES[$REPLICA_SET_INDEX]})

  STATEFULSET_NAME=$(echo mongod-$REPLICA_SET_NAME | tr '[:upper:]' '[:lower:]')
  DNS_INDEX=0

  # The first replica set are config servers, the rest shards
  [[ $REPLICA_SET_INDEX -eq 0 ]] \
     && STARTUP_FLAG=--configsvr \
     || STARTUP_FLAG=--shardsvr
  
  tr " " "\n" <<< $REPLICA_SET_CLUSTERS | uniq -c | \
  while read -e NUMBER_OF_NODES CLUSTER; do
    set -e # We need to toggle exit on error because read returns non-zero when an empty line is found

    KUBECTL_ARGS="--context=$CLUSTER --namespace=$MONGO_K8S_NAMESPACE"

    # Create mongod nodes
    cat kubernetes/mongodb_headless_service.yaml kubernetes/mongodb_statefulset.yaml \
        | substitute_and_log \
               REPLICA_SET_NAME         $REPLICA_SET_NAME \
               STATEFULSET_NAME         $STATEFULSET_NAME \
               MONGOD_PORT              $MONGOD_PORT \
               MONGOD_STARTUP_FLAG      $STARTUP_FLAG \
               NUMBER_OF_NODES          $NUMBER_OF_NODES \
               MONGOD_AZ_STORAGE_CLASS  $MONGOD_AZ_STORAGE_CLASS \
               MONGOD_STORAGE_SIZE      $MONGOD_STORAGE_SIZE \
        | run kubectl $KUBECTL_ARGS apply -f -

    # Expose each mongod node as a public ip
    for NODE_INSTANCE in $(seq 1 1 $NUMBER_OF_NODES); do

      POD_NAME=$STATEFULSET_NAME-$((NODE_INSTANCE-1))
      REPLICA_SET_DNS_NAME=${REPLICA_SET_DNS_NAMES[$DNS_INDEX]}
      FULL_DNS_NAME=$REPLICA_SET_DNS_NAME.$DNS_ZONE

      # Determine subscription to use
      if [[ "$CLUSTER" == "payx-demo-us-east" ]]; then
        CLUSTER_SUBSCRIPTION=$AZ_AKS_SUBSCRIPTION_US_EAST
      elif [[ "$CLUSTER" == "payx-demo-us-west" ]]; then
        CLUSTER_SUBSCRIPTION=$AZ_AKS_SUBSCRIPTION_US_WEST
      elif [[ "$CLUSTER" == "payx-demo-eu" ]]; then
        CLUSTER_SUBSCRIPTION=$AZ_AKS_SUBSCRIPTION_EU
      else
        echo "ERROR: Unknown cluster $CLUSTER"
        exit 1
      fi
      DNS_SUBSCRIPTION=$AZ_SUBSCRIPTION

      # We need to create IPs under the AKS resource group generated by Azure; looking up the name of the group
      AKS_RESOURCE_GROUP=$(run az aks list \
          --query="[?name==\`$CLUSTER\`].nodeResourceGroup" \
          --output=tsv \
          --subscription=$CLUSTER_SUBSCRIPTION \
      )

      # Create (or get) the Public IP; extract the IP and the ID
      PUBLIC_IP_INFO=$(run az network public-ip create \
          --resource-group "$AKS_RESOURCE_GROUP" \
          --name "$POD_NAME" \
          --allocation-method static \
          --query '[publicIp.ipAddress, publicIp.id].join(`,`,@)' \
          --output tsv \
          --subscription=$CLUSTER_SUBSCRIPTION \
      )

      PUBLIC_IP=${PUBLIC_IP_INFO/,*/}
      PUBLIC_IP_ID=${PUBLIC_IP_INFO/*,/}

      # Register Public IP with DNS
      run az network dns record-set a create \
          --resource-group=$AZ_RESOURCE_GROUP_NAME \
          --zone-name=$DNS_ZONE \
          --name "$REPLICA_SET_DNS_NAME" \
          --target-resource "$PUBLIC_IP_ID" \
          --subscription=$DNS_SUBSCRIPTION

      # Create service exposing external IP for Pod
      cat kubernetes/mongodb_service.yaml \
          | substitute_and_log \
                 EXTERNAL_DNS             $FULL_DNS_NAME:$MONGOD_PORT \
                 REPLICA_SET_NAME         $REPLICA_SET_NAME \
                 POD_NAME                 $POD_NAME \
                 PUBLIC_IP                $PUBLIC_IP \
                 MONGOD_PORT              $MONGOD_PORT \
          | run kubectl --context=$CLUSTER --namespace=$MONGO_K8S_NAMESPACE apply -f -

      # Create SRV record for mongod
      COMMAND_OUTPUT=$(run az network dns record-set srv list \
          --resource-group=$AZ_RESOURCE_GROUP_NAME \
          --zone-name=$DNS_ZONE \
          --query="[?name==\`_mongodb._tcp.$DNS_SRV_NAME\`] | [0].srvRecords[?target==\`$FULL_DNS_NAME\`].target" \
          --output=tsv \
          --subscription=$DNS_SUBSCRIPTION
      )
      if [[ -z "$COMMAND_OUTPUT" ]]; then
        run az network dns record-set srv add-record \
            --resource-group=$AZ_RESOURCE_GROUP_NAME \
            --zone-name=$DNS_ZONE \
            --record-set-name=_mongodb._tcp.$DNS_SRV_NAME \
            --priority=0 \
            --weight=0 \
            --port=$MONGOD_PORT \
            --target=$FULL_DNS_NAME \
            --subscription=$DNS_SUBSCRIPTION
      fi
      
      ((DNS_INDEX++))

      set +e # We need to toggle exit on error because read returns non-zero when an empty line is found
    done

    set -e # We need to toggle exit on error because read returns non-zero when an empty line is found
  done

  # Create TXT record for replica set
  COMMAND_OUTPUT=$(run az network dns record-set txt list \
      --resource-group=$AZ_RESOURCE_GROUP_NAME \
      --zone-name=$DNS_ZONE \
      --query="[?name==\`$DNS_SRV_NAME\`] | [0].name" \
      --output=tsv \
      --subscription=$DNS_SUBSCRIPTION \
  )
  if [[ -z "$COMMAND_OUTPUT" ]]; then
    run az network dns record-set txt add-record \
        --resource-group=$AZ_RESOURCE_GROUP_NAME \
        --zone-name=$DNS_ZONE \
        --record-set-name=$DNS_SRV_NAME \
        --value="replicaSet=$REPLICA_SET_NAME" \
        --subscription=$DNS_SUBSCRIPTION
  fi

done

#***********************************#
#***  CREATE MONGO QUERY ROUTER  ***#
#***********************************#

FULL_DNS_NAME=$MONGOS_DNS_NAME:$DNS_ZONE
DEPLOYMENT_NAME=mongos-$MONGOS_DNS_NAME

# Determine subscription to use
if [[ "$MONGOS_CLUSTER" == "payx-demo-us-east" ]]; then
  CLUSTER_SUBSCRIPTION=$AZ_AKS_SUBSCRIPTION_US_EAST
elif [[ "$MONGOS_CLUSTER" == "payx-demo-us-west" ]]; then
  CLUSTER_SUBSCRIPTION=$AZ_AKS_SUBSCRIPTION_US_WEST
elif [[ "$MONGOS_CLUSTER" == "payx-demo-eu" ]]; then
  CLUSTER_SUBSCRIPTION=$AZ_AKS_SUBSCRIPTION_EU
else
  echo "ERROR: Unknown cluster $MONGOS_CLUSTER"
  exit 1
fi
DNS_SUBSCRIPTION=$AZ_SUBSCRIPTION

# We need to create IPs under the AKS resource group generated by Azure; looking up the name of the group
AKS_RESOURCE_GROUP=$(run az aks list \
    --query="[?name==\`$MONGOS_CLUSTER\`].nodeResourceGroup" \
    --output=tsv \
    --subscription=$CLUSTER_SUBSCRIPTION \
)

# Create (or get) the Public IP; extract the IP and the ID
PUBLIC_IP_INFO=$(run az network public-ip create \
    --resource-group "$AKS_RESOURCE_GROUP" \
    --name "$DEPLOYMENT_NAME" \
    --allocation-method static \
    --query '[publicIp.ipAddress, publicIp.id].join(`,`,@)' \
    --output tsv \
    --subscription=$CLUSTER_SUBSCRIPTION \
)

PUBLIC_IP=${PUBLIC_IP_INFO/,*/}
PUBLIC_IP_ID=${PUBLIC_IP_INFO/*,/}

# Register Public IP with DNS
run az network dns record-set a create \
    --resource-group=$AZ_RESOURCE_GROUP_NAME \
    --zone-name=$DNS_ZONE \
    --name "$MONGOS_DNS_NAME" \
    --target-resource "$PUBLIC_IP_ID" \
    --subscription=$AZ_SUBSCRIPTION \

CONFIG_REPLICA_SET_MEMBERS=()
for MEMBER in ${MONGO_DNS_NAMES[0]}; do
  CONFIG_REPLICA_SET_MEMBERS+=( $MEMBER.$DNS_ZONE:$MONGOD_PORT  )
done

KUBECTL_ARGS="--context=$MONGOS_CLUSTER --namespace=$MONGO_K8S_NAMESPACE"

cat kubernetes/mongos_deployment.yaml kubernetes/mongos_service.yaml \
    | run substitute_and_log \
           DEPLOYMENT_NAME             $DEPLOYMENT_NAME \
           CONFIG_REPLICA_SET_NAME     ${MONGO_REPLICA_SETS[0]} \
           CONFIG_REPLICA_SET_MEMBERS  $(IFS=','; echo "${CONFIG_REPLICA_SET_MEMBERS[*]}") \
           EXTERNAL_DNS                $FULL_DNS_NAME:$MONGOS_PORT \
           PUBLIC_IP                   $PUBLIC_IP \
           MONGOS_PORT                 $MONGOS_PORT \
    | run kubectl $KUBECTL_ARGS apply -f -

#*****************#
#*** CLEAN UP  ***#
#*****************#

echo "SUCCESS"
